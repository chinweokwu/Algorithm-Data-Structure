def advanced_quicksort(array, begin_index = 0, end_index = array.length - 1)
  # divide the problem until there's a sub-array between the begin and the end indices
  if begin_index < end_index
    # partition the array
    pivot_index = partition(array, begin_index, end_index)
    # solve the sub-problem that includes the elements smaller than the pivot
    #puts "iterate left #{begin_index} .... #{pivot_index -1}"
    #p array[begin_index..pivot_index - 1]
     p array
    advanced_quicksort(array, begin_index, pivot_index - 1)
    # solve the sub-problem that includes the elements greater than the pivot
    #puts "iterate right #{pivot_index + 1} .... #{end_index}"
    #p array[pivot_index + 1..end_index]
    advanced_quicksort(array, pivot_index + 1, end_index)

    # p array
  end
end

def partition(array, begin_index, end_index)
  i= begin_index
  pivot=array[end_index]
  #puts "pivot #{pivot}"
  #puts "left begin_index #{begin_index} i = #{i}"
  #puts "right end_index #{end_index}"
  
  for j in (begin_index..end_index-1)
    if (array[j] <= pivot) 
        
      array[i], array[j] = array[j], array[i]
      
      i= i + 1
      #puts "i = #{i}"
    end
   #p array 
   #puts "j = #{j}"
   #gets
  end
  
  array[i], array[end_index] = array[end_index], array[i]

  return i

end

advanced_quicksort([1, 3, 9, 8, 2, 7, 5])
# => 1 3 2 5 9 7 8
#    1 2 3 5 9 7 8
#    1 2 3 5 7 8 9

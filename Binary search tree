class Node
  attr_reader :data
  attr_accessor :left, :right

  def initialize(data)
    @data = data
  end
end

class BST
    def initialize()
    @root = nil
  end


  def insert(node, root = @root)
    if @root.nil?
      @root=node
    else
      if node.data < root.data
        if !root.left.nil?
         insert(node, root.left)
        else

         root.left=node
        end
       else

        if !root.right.nil?

         insert(node, root.right)
        else
         root.right=node
        end
      end
    end

  end

  def pre_order(node = @root, str = '')
    str += node.data.to_s + ' '
    str += pre_order(node.left) if node.left
    str += pre_order(node.right) if node.right
    return str
  end
end


def binary_search_tree(array)
  tree = BST.new
  array.each { |e| tree.insert(Node.new(e)) }
  tree.pre_order
end

puts binary_search_tree([8, 3, 10, 1, 6, 14, 4, 7, 13])
# => "8 3 1 6 4 7 10 14 13"

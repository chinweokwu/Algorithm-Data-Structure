class Node
  attr_reader :data
  attr_accessor :left, :right

  def initialize(data)
    @data = data
  end
end

class BST
     def initialize
        @root = nil
    end

    def insert(value)
        @newNode = Node.new(value)
        if @root.nil?
            @root = @newNode
            return
        else
            @current = @root
            while true
                if value < @current.value
                    if @current.left.nil?
                        @current.left = @newNode
                        return
                    else
                        @current = @current.left
                    end
                elsif value > @current.value
                    if @current.right.nil?
                        @current.right = @newNode
                        return
                    else
                        @current = @current.right
                    end
                end
            end
        end 
    end
  end

  def pre_order(node = @root)
    return '' if node.nil?
    result = "#{node.data} "
    result += pre_order(node.left)
    result += pre_order(node.right)
  end
end


def binary_search_tree(array)
  tree = BST.new
  array.each { |e| tree.insert(Node.new(e)) }
  tree.pre_order
end

puts binary_search_tree([8, 3, 10, 1, 6, 14, 4, 7, 13])
# => "8 3 1 6 4 7 10 14 13"
